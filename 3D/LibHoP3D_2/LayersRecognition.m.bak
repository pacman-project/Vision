% this is to perform recognition of all levels of the hierarchy

% do not forget: 'matlabpool open 4' for parallel computing

% dataSetNumber 
% for Aim@Shape datasetnumber = 1;
% for Washington datasetnumber = 2

function [] = LayersRecognition()

dataSetNumber = 3;
nClusters = 9;
n2Clusters = nClusters^2;

% define folders configuration
root = '/home/vvk201/LibHoP3D/';
addPaths(root);


% define a path to the input files

depthPathDefault = '';
if dataSetNumber == 1
    depthPathDefault = [root, 'settings\list_depth.mat'];
    depthPath = 'D:\3D\Input Data\Images for categorization\1T';    
elseif dataSetNumber == 2
    depthPath = '/home/vvk201/Wash-rgbd-dataset'; % '/home/vvk201/Wash-rgbd-dataset_0003T' 
elseif dataSetNumber == 3
    depthPath = '/home/vvk201/Vladislav_STD/depth'; % '/home/vvk201/Wash-rgbd-dataset_0003T'    
end

fileListPrecomputed = false;
is_subset = false; % whether we shall use all files for learning

% define the subset length
if dataSetNumber == 1
    subset_len = 400; % how much shall we use for training
    subsetPercent = 1.0; % not used
elseif dataSetNumber == 2
    subset_len = 1000;
    subsetPercent = 0.01; % what percent from each folder to use
elseif dataSetNumber == 3
    subset_len = 1000;
    subsetPercent = 0.01; % what percent from each folder to use
end

% % downsampling (if necessary)
% if dataSetNumber == 1
%     is_downsampling = false;
%     dowsample_rate = 1;
% elseif dataSetNumber == 2    
%     is_downsampling = true;
%     dowsample_rate = 2.5;
% end

is_downsampling = false;
dowsample_rate = 1;

% define all filtering parameters 

[dxKernel, combs, largestLine, sigma, sigmaKernelSize, isErrosion, discRadius, is_guided, r_guided, eps, ...
    is_mask_extended, maxExtThresh1, maxExtThresh2] = loadFilteringParameters(dataSetNumber);

displacement34 = 6;

% ------------ parameters for line discretization---------------------
% min [error + wOverlap * overlap - wCoverage*coverage ]
if dataSetNumber == 1 || dataSetNumber == 3
    wCoverage = 0.25;
    wOverlap = 0.4;
elseif dataSetNumber == 2    
    wCoverage = 3.25;
    wOverlap = 0.52;
end

% --------Define the layers for recognition--------------------------------
is_first_layer = false;
is_second_layer = false;
is_third_layer = false;
is_4th_layer = true; 
is_5th_layer = false; 
is_6th_layer = false;

is_inhibition_first_layer = false;
is_inhibition_second_layer = false; 
is_inhibition_third_layer = false;
is_inhibition_4th_layer = false; 
is_inhibition_5th_layer = false; 
is_inhibition_6th_layer = false;

areLayersRequired = [is_first_layer, is_second_layer, is_third_layer, is_4th_layer, is_5th_layer, is_6th_layer];
isInhibitionRequired = [is_inhibition_first_layer, is_inhibition_second_layer, is_inhibition_third_layer, ...
                        is_inhibition_4th_layer, is_inhibition_5th_layer, is_inhibition_6th_layer];

% --------output folder-----------------------------------------------------

outRoot2 = '/home/vvk201/Vladislav_STD_layer2';
outRoot3 = '/home/vvk201/Vladislav_STD_layer3';
outRoot4 = '/home/vvk201/Vladislav_STD_layer4';
outRoot5 = '/home/vvk201/Vladislav_STD_layer5';
 
outRoot2 = '/home/vvk201/Wash-rgbd-dataset_layer2';
outRoot3 = '/home/vvk201/Wash-rgbd-dataset_layer3';
outRoot4 = '/home/vvk201/Wash-rgbd-dataset_layer4';
outRoot5 = '/home/vvk201/Wash-rgbd-dataset_layer5';
 
% --------input file names-----------------------------------------------------

dsN = num2str(dataSetNumber);
nCl = num2str(nClusters);
aL = '3'; % abstraction level

vocabulary1Layer = [root, 'statistics/statistics_1_', dsN, '_', nCl, '.mat'];
 
 % files for part selection results
parts3Layer = [root, 'statistics/partsSelectionResults_3_', dsN, '_', nCl, '_a', aL, '.mat'];
parts4Layer = [root, 'statistics/partsSelectionResults_4_', dsN, '_', nCl, '_a', aL, '.mat'];
parts5Layer = [root, 'statistics/partsSelectionResults_5_', dsN, '_', nCl, '_a', aL, '.mat'];
parts6Layer = [root, 'statistics/partsSelectionResults_6_', dsN, '_', nCl, '_a', aL, '.mat'];

% files for the sieved statistics
statistics1LayerSieved = [root, 'statistics/statisticsSieved_1_', dsN, '_', nCl, '.mat'];
statistics3LayerSieved = [root, 'statistics/statisticsSieved_3_', dsN, '_', nCl, '.mat'];
statistics4LayerSieved = [root, 'statistics/statisticsSieved_4_', dsN, '_', nCl, '.mat'];
statistics5LayerSieved = [root, 'statistics/statisticsSieved_5_', dsN, '_', nCl, '.mat'];
statistics6LayerSieved = [root, 'statistics/statisticsSieved_6_', dsN, '_', nCl, '.mat'];

% files for the Aggregated statistics
statistics1LayerAggregated = [root, 'statistics/statisticsAggregated_1_', dsN, '_', nCl, '.mat'];
statistics3LayerAggregated = [root, 'statistics/statisticsAggregated_3_', dsN, '_', nCl, '.mat'];
statistics4LayerAggregated = [root, 'statistics/statisticsAggregated_4_', dsN, '_', nCl, '.mat'];
statistics5LayerAggregated = [root, 'statistics/statisticsAggregated_5_', dsN, '_', nCl, '.mat'];
statistics6LayerAggregated = [root, 'statistics/statisticsAggregated_6_', dsN, '_', nCl, '.mat'];

% files for layer visualization
fileForVisualization3Layer = [root, 'statistics/fileForVisualization_3_', dsN, '_', nCl, '.mat'];
fileForVisualization4Layer = [root, 'statistics/fileForVisualization_4_', dsN, '_', nCl, '.mat'];
fileForVisualization5Layer = [root, 'statistics/fileForVisualization_5_', dsN, '_', nCl, '.mat'];
fileForVisualization6Layer = [root, 'statistics/fileForVisualization_6_', dsN, '_', nCl, '.mat'];
 
% %--------------------------------------------------------------------------
% % creating a filelist here
% 
if dataSetNumber == 1 || dataSetNumber == 3
    [list_depth, lenF] = extractFileList(fileListPrecomputed, depthPath, depthPathDefault, is_subset, subset_len);
    list_mask = [];
elseif dataSetNumber == 2
    [list_depth, list_mask, ~, lenF] = extractFileListWashington(fileListPrecomputed, depthPath, depthPathDefault, is_subset, subsetPercent);
end


%--------------------------------------------------------------------------

if is_first_layer || is_second_layer 
    
    % read the first layer vocabulary

    load(vocabulary1Layer); % should contain: cluster1Centres, cluster1Lengths, thresh
    
    computeCoverage(list_depth, list_mask, lenF, sigma, sigmaKernelSize, dxKernel, isErrosion, discRadius, nClusters, ...
                vocabulary1Layer, areLayersRequired, outRoot2, combs, largestLine, wCoverage, wOverlap, isInhibitionRequired, ...
                is_downsampling, dowsample_rate, dataSetNumber, depthPath, cluster1Centres, cluster1Lengths, thresh, ...
                is_guided, r_guided, eps, is_mask_extended, maxExtThresh1, maxExtThresh2);
end

% LIST_MASK - TO DELETE
            
if is_third_layer 
    
    elPath = outRoot2; % second layer elements
    is_subset = false;
    
    if dataSetNumber == 2  % extract images with previous layer
        [list_El, ~, ~, lenF] = extractFileListWashingtonForClassification(elPath, is_subset, 1.0);
    else
        [list_El, lenF] = extractFileList(fileListPrecomputed, elPath, '', is_subset, subset_len);
    end
    
    load(vocabulary1Layer); % should contain: cluster1Centres, cluster1Lengths, thresh
    load(statistics3LayerAggregated);  % 'X' ,'frequencies', 'curTS', 'triples'
    load(parts3Layer);   % 'triples3Out', 'coverageOut', 'n3Clusters', 'abstractionLevel');
    load(statistics3LayerSieved);     %   'statistics', 'cluster3Depths', 'outputCoords'
    clear('statistics', 'outputCoords', 'triples', 'frequencies');

    triples3Out = triples3Out(1:n3Clusters, :);
    
    meargeThresh = 2.0;
    depthStep = thresh/4;
    
    computeCoverage3(list_depth, list_El, list_mask, lenF, sigma, sigmaKernelSize, dxKernel, nClusters, n2Clusters, n3Clusters, X, triples3Out, coverageOut, displacement34, abstractionLevel, ...
                areLayersRequired, outRoot3, combs, largestLine, wCoverage, wOverlap, isInhibitionRequired, ...
                is_downsampling, dowsample_rate, elPath, meargeThresh, isErrosion, discRadius, is_guided, r_guided, eps, ...
                is_mask_extended, maxExtThresh1, maxExtThresh2, thresh, depthStep, cluster3Depths, dataSetNumber);         
            
end



if is_4th_layer 
    
    elPath = outRoot3; % third layer elements
    
    is_subset = false;
    
    if dataSetNumber == 2  % extract images with previous layer
        [list_El, ~, ~, lenF] = extractFileListWashingtonForClassification(elPath, is_subset, 1.0);
    else
        [list_El, lenF] = extractFileList(fileListPrecomputed, elPath, depthPathDefault, is_subset, subset_len)
    end
    
    load(vocabulary1Layer); % should contain: cluster1Centres, cluster1Lengths, thresh
    load(statistics4LayerAggregated);  % 'X' ,'frequencies', 'curTS', 'triples'
    load(parts4Layer);   % 'triples4Out', 'coverageOut', 'n4Clusters', 'abstractionLevel');
    load(statistics4LayerSieved);     %   'statistics', 'cluster4Depths', 'outputCoords'
    clear('statistics', 'outputCoords', 'triples', 'frequencies');

    triples4Out = triples4Out(1:n4Clusters, :);
    
    meargeThresh = 2.0;
    depthStep = thresh/4;
    n3Clusters = 281;
    
    computeCoverage4(list_depth, list_El, list_mask, lenF, sigma, sigmaKernelSize, dxKernel, nClusters, n2Clusters, ...
                n3Clusters, n4Clusters, X, triples4Out, coverageOut, displacement34, abstractionLevel, ...
                areLayersRequired, outRoot4, combs, largestLine, wCoverage, wOverlap, isInhibitionRequired, ...
                is_downsampling, dowsample_rate, elPath, meargeThresh, isErrosion, discRadius, is_guided, r_guided, eps, ...
                is_mask_extended, maxExtThresh1, maxExtThresh2, thresh, depthStep, cluster4Depths, fileForVisualization3Layer, dataSetNumber);   
    
    
end





